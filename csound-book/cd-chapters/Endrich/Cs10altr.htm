<html>	<head>		<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">		<meta name="generator" content="Adobe GoLive 4">		<title>CSCORE EXAMPLE: CS10ALTR.C</title>	</head>	<body bgcolor="white">		<a href="3Csccdrom.htm#CONTENTS">Return</a> to main text about the applications		<pre>/* CS10ALTR.C - use functions to alter several pfields, with cmndline input *		  of scaling factors * Developed from Cscore example in Csound manual * CS10ALTR V0.7TT A Endrich 17 August 1995 * This program originally transposed a block of score events down an octave * 	and effected a gradual diminuendo. * Now it allows user inputs for several pfields and calls separate functions *	to alter each one. * Note that you need a suitable input score. */#include &lt;stdio.h &gt; #include &lt;:stdlib.h &gt; #include &lt;math.h &gt; #include &quot;cscore.h&quot; /* DECLARE USER-DEFINED FUNCTIONS */double newstt(double, double);double newdur(double, double);int newamp(int, int);double newpch(double, double);voidphelp(void) {	printf(&quot;\nCS10ALTR - alter 4 pfields, with cmdline inputs,\n&quot;);	printf(&quot;\tscaling by fixed (non-accumulating) factors\n&quot;);	printf(&quot;\nUsage:  cs10altr  -sstartf -ddurf -aampf -ffreqf \inscore.sc outscore.sc\n&quot;);	printf(&quot;\t  -sstartf\tstart_time scaling ratio (*: 0.0-&gt;)\n&quot;);	printf(&quot;\t  -ddurf\tdur scaling ratio (double) (*:  &gt; 0.0)\n&quot;);	printf(&quot;\t  -aampf\tamp scaling integer	(+: 0- &gt; x000)\n&quot;);	printf(&quot;\t  -ffreqf\tfrq scaling ratio (double)(*:  &gt; 0.0)\n&quot;);	printf(&quot;\t\tWhen multiplying, vals &lt; 1 compress,  &gt; 1 expand\n&quot;);	printf(&quot;\t\tNB1: vals &lt; 1 * scaling factors &lt; 1 become very small!\n&quot;);	printf(&quot;\t\tNB2: if startf = 0, a simultaneity will result\n&quot;);	printf(&quot;\t  inscore.sc\tassumed to have diff values for \n&quot;);	printf(&quot;\t     each event, but = inscore values will also \n&quot;);	printf(&quot;\t     all be = in the outscore, though rescaled\n&quot;);	printf(&quot;\t  outscore.sc\tCsnd scorefile produced by prg\n&quot;);		exit(1);}voidmain(int argc, char *argv[])int	argc;char	*argv[];{	EVENT *e, **f;	EVLIST *a, *b;	int n, i;		/*declare the int counters to be used */	int ampf = 1000;	/* user input for amplitude scaling factor */	double startf = 0;	/* user input for start time scaling factor */	double durf = 1;	/* user input for duration scaling factor */	double freqf = 1.01;	/* variable for pitch scaling factor */	/* READ USER-DEFINED FLAGS/PARAMETER INPUT FROM COMMAND LINE */	while(argc  &gt;  1 &amp;&amp; argv[1][0] == '-' &amp;&amp; argv[1][1] != 0) {		switch(argv[1][1]) {		case('s'):			startf = atof(&amp;argv[1][2]);			fprintf(stderr,&quot;\nuser's time factor = %f\n&quot;, startf);			argc--, argv++;			break;		case ('d'):			durf = atof(&amp;argv[1][2]);			printf(&quot;user's duration factor = %f\n&quot;, durf);			argc--, argv++;			break;		case ('a'):			ampf = atoi(&amp;argv[1][2]);			printf(&quot;user's ampl factor  = %d\n&quot;, ampf);			argc--, argv++;			break;		case ('f'):			freqf = atof(&amp;argv[1][2]);			printf(&quot;user's freq factor  = %f\n&quot;, freqf);			argc--, argv++;			break;		default:			fprintf(stderr, &quot;CS10ALTR: '%s' is not one of the \options\n&quot;, argv[1]);			phelp();			exit(1);		}	}	/* OPEN INSCORE &amp; OUTSCORE */	initial(argc, argv);	/* check reading the arguments and open files */	if(argc &lt; 2) {		/* Test that user's commandline is ok */		phelp();		exit(1);	}	/* PROCEED TO CREATE OUTPUT SCORE FILE */	putstr(&quot;;Csound scorefile output by CS10ALTR:&quot;);	a = lget();		/* read input score into event list &quot;a&quot;  */	b = lsepf(a);		/* separate out the f statements */	lput(b);		/* write f statements into the score */	lrelev(b);		/* and release the spaces used */	e = defev(&quot;t0 76&quot;);	/* define event for tempo statement */	putev(e);		/* write tempo statement to score */	lput(a);		/* write the list of events &quot;a&quot; */	putstr(&quot;s&quot;);		/* write section end marker */	putev(e);		/* write tempo statement again */	b = lcopyev(a);		/* make a copy of events  in list &quot;a&quot; */	n = b-&gt;nevents;		/* and count the number copied */	f = &amp;a-&gt;e[1];		/* let f = the address of the first event */	/* adapt inscore according to user's inputs */	/* CALL USER-DEFINED FUNCTIONS TO ALTER EACH PFIELD */	for(i=0; i&lt;=n-1; i++) {		(*f)- &gt; p[2] = newstt((*f)- &gt; p[2],startf);	/* alter start times */		(*f)- &gt; p[3] = newdur((*f)- &gt; p[3],durf);	/* alter durations */		(*f)- &gt; p[4] = newamp((*f)- &gt; p[4],ampf);	/* alter amplitudes */		(*f)- &gt; p[5] = newpch((*f)- &gt; p[5],freqf);	/* alter pitches */		f++;					/* move -&gt; next event */	}	a = lcat(b,a);		/* join &quot;a&quot; list events to &quot;b&quot; list events */	lput(a);		/* write the complete event list to outscore */	putstr(&quot;e&quot;);		/* write end-of-score marker */}				/* end of main *//* USER-DEFINED FUNCTIONS */doublenewstt(double st, double sf)/* double	st;	start time variable as in pfield 2 *//* double	sf;	start time factor input on command line */{	st *= sf;	/* start time increases by user's factor */	fprintf(stderr, &quot;\ndiagnostic, newst(): new start time = %.3f\n&quot;, st);	return (st);}doublenewdur(double du, double df)/* double du;	duration variable as in pfield 3 *//* double df;	duration factor input on command line */{	du *= df;	/* duration scaled by user's factor */	fprintf(stderr, &quot;diagnostic, newst(): new duration = %.3f\n&quot;, du);	return (du);}intnewamp(int am, int af)/* int am;	amplitude variable as in pfield 4 *//* int af; 	amplitude factor input on command line */{	am += af;	/* amplitude increase by user's factor */	if(am  &gt;= 30000) {	/* attempt setting amplitude limits */		am -= af;	/* dim if reaches upper limit */		if(am &lt;= 500) {			am += af; /* cresc if reaches lower limit */		}	}	fprintf(stderr, &quot;diagnostic, newst(): new amplitude = %.3d\n&quot;, am);	return(am);}doublenewpch(double pch, double ff)/* double  pch;	pitch value as in pfield 5 *//* double  ff;  scaling factor input on command line */{	pch *= ff;	/* pitch scaled by user's scaling factor */	fprintf(stderr, &quot;diagnostic, newst(): new pitch = %.3f\n&quot;, pch);	return(pch);}	</pre>		<p><a href="3Csccdrom.htm#CONTENTS">Return</a> to main text about the applications</p>		<p>	</body></html>